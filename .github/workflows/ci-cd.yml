name: 'CI/CD'

on:
  pull_request:
  push:
    branches:
      - canary
      - main

env:
  APP_ID: fosdem-dl
  APP_VERSION: 0.1.0-RC.1
  GRAALVM_VERSION: 23.0.0
  HEAP_SIZE_AT_BUILD_TIME: '-R:MaxHeapSize=1024m'
  JAVA_VERSION: 21
  OPTIMIZATION_LEVEL: '-O2'

jobs:
  linux:
    name: Build (Linux)
    runs-on: ubuntu-latest

    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üîß Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          check-for-updates: true
          distribution: graalvm-community
          java-version: ${{ env.JAVA_VERSION }}
          native-image-job-reports: true
          native-image-pr-reports: true
          version: ${{ env.GRAALVM_VERSION }}

      - name: üîß Setup Clojure CLI and Babashka
        uses: DeLaGuardo/setup-clojure@12.5
        with:
          cli: 'latest'
          bb: 'latest'
      
      # This action uses the GitHub CLI.
      # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/using-github-cli-in-workflows
      - name: ‚¨áÔ∏è Download com.github.jackdbd/pod-jackdbd-jsoup
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          POD_JACKDBD_JSOUP_VERSION: 0.3.0
        run: ./download_pod_jackdbd_jsoup.sh
      
      - name: üîç Run all tests
        run: bb test_runner.clj

      # https://github.com/liquidz/babashka-test-action/
      # - name: Run babashka-test-action
      #   uses: liquidz/babashka-test-action@v1
      #   with:
      #     source-paths: 'src'
      #     test-paths: 'test'
      #     test-file-pattern: '_test.clj$'

      - name: üì¶ Build a Babashka uberjar
        run: bb build:bb-uber

      - name: üì¶ Build a regular uberjar
        run: bb build:uber

      - name: üì¶ Compile uberjar to x86_64-linux binary with GraalVM native-image
        run: ./script/compile.sh

  macos:
    name: Build (macOS)
    runs-on: macos-latest

    steps:
      - name: üõéÔ∏è Checkout
        uses: actions/checkout@v4

      - name: ‚¨áÔ∏è Download uberjar
        run: echo "TODO download uberjar"

      - name: üîß Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          check-for-updates: true
          distribution: graalvm-community
          java-version: ${{ env.JAVA_VERSION }}
          native-image-job-reports: true
          native-image-pr-reports: true
          version: ${{ env.GRAALVM_VERSION }}

      - name: üì¶ Compile uberjar to AArch64-macOS binary with GraalVM native-image
        run: |
          native-image \
            -jar ${{ env.APP_ID }}-${{ env.APP_VERSION }}-standalone.jar \
            '-H:ReflectionConfigurationFiles=reflection.json' \
            '-H:+ReportExceptionStackTraces' \
            '-J-Dclojure.compiler.direct-linking=true' \
            ${{ env.HEAP_SIZE_AT_BUILD_TIME }} \
            ${{ env.OPTIMIZATION_LEVEL }} \
            '-march=armv8-a' \
            '--initialize-at-build-time' \
            '--native-image-info' \
            '--no-fallback' \
            '--report-unsupported-elements-at-runtime'
